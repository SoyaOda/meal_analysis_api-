#!/usr/bin/env python3
"""
È£ü‰∫ãÂàÜÊûêAPI „É≠„Ç∞ÂàÜÊûê„ÉÑ„Éº„É´

‰ΩøÁî®‰æã:
python analyze_logs.py --report                    # Âü∫Êú¨„É¨„Éù„Éº„ÉàÁîüÊàê
python analyze_logs.py --export sessions.csv       # CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà
python analyze_logs.py --slow --threshold 5000     # 5Áßí‰ª•‰∏ä„ÅÆÈÅÖ„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂàÜÊûê
python analyze_logs.py --errors                    # „Ç®„É©„Éº„Éë„Çø„Éº„É≥ÂàÜÊûê
python analyze_logs.py --days 7                    # ÈÅéÂéª7Êó•Èñì„ÅÆ„Éá„Éº„Çø„ÅÆ„ÅøÂàÜÊûê
"""

import argparse
import sys
from datetime import datetime, timedelta
from pathlib import Path

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÇíËøΩÂä†
sys.path.append(str(Path(__file__).parent))

from app.utils.log_analyzer import create_log_analyzer

def main():
    parser = argparse.ArgumentParser(
        description="È£ü‰∫ãÂàÜÊûêAPI „É≠„Ç∞ÂàÜÊûê„ÉÑ„Éº„É´",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        "--log-dir", 
        default="logs", 
        help="„É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„Çπ („Éá„Éï„Ç©„É´„Éà: logs)"
    )
    
    # ÂàÜÊûê„Çø„Ç§„Éó
    parser.add_argument(
        "--report", 
        action="store_true", 
        help="Âü∫Êú¨ÂàÜÊûê„É¨„Éù„Éº„Éà„ÇíË°®Á§∫"
    )
    
    parser.add_argument(
        "--export", 
        metavar="FILE", 
        help="„Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíCSV„Éï„Ç°„Ç§„É´„Å´„Ç®„ÇØ„Çπ„Éù„Éº„Éà"
    )
    
    parser.add_argument(
        "--slow", 
        action="store_true", 
        help="ÈÅÖ„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂàÜÊûê"
    )
    
    parser.add_argument(
        "--threshold", 
        type=float, 
        default=10000, 
        help="ÈÅÖ„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆÈñæÂÄ§ („Éü„É™Áßí, „Éá„Éï„Ç©„É´„Éà: 10000)"
    )
    
    parser.add_argument(
        "--errors", 
        action="store_true", 
        help="„Ç®„É©„Éº„Éë„Çø„Éº„É≥„ÇíÂàÜÊûê"
    )
    
    # ÊôÇÈñì„Éï„Ç£„É´„Çø
    parser.add_argument(
        "--days", 
        type=int, 
        help="ÈÅéÂéªNÊó•Èñì„ÅÆ„Éá„Éº„Çø„ÅÆ„ÅøÂàÜÊûê"
    )
    
    parser.add_argument(
        "--start-date", 
        help="ÈñãÂßãÊó•ÊôÇ (ISOÂΩ¢Âºè: YYYY-MM-DD „Åæ„Åü„ÅØ YYYY-MM-DD HH:MM:SS)"
    )
    
    parser.add_argument(
        "--end-date", 
        help="ÁµÇ‰∫ÜÊó•ÊôÇ (ISOÂΩ¢Âºè: YYYY-MM-DD „Åæ„Åü„ÅØ YYYY-MM-DD HH:MM:SS)"
    )
    
    args = parser.parse_args()
    
    # ÊúÄ‰Ωé1„Å§„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅåÂøÖË¶Å
    if not any([args.report, args.export, args.slow, args.errors]):
        args.report = True  # „Éá„Éï„Ç©„É´„Éà„Åß„É¨„Éù„Éº„ÉàË°®Á§∫
    
    try:
        analyzer = create_log_analyzer(args.log_dir)
    except ValueError as e:
        print(f"‚ùå „Ç®„É©„Éº: {e}")
        return 1
    
    # Êó•‰ªò„Éï„Ç£„É´„Çø„ÅÆÊ∫ñÂÇô
    start_date = None
    end_date = None
    
    if args.days:
        end_date = datetime.now()
        start_date = end_date - timedelta(days=args.days)
        print(f"üìÖ ÈÅéÂéª{args.days}Êó•Èñì„ÅÆ„Éá„Éº„Çø„ÇíÂàÜÊûê ({start_date.strftime('%Y-%m-%d')} „Äú {end_date.strftime('%Y-%m-%d')})")
    
    if args.start_date:
        try:
            # YYYY-MM-DD HH:MM:SS „Åæ„Åü„ÅØ YYYY-MM-DD „ÅÆÂΩ¢Âºè„ÇíÂèó„ÅëÂÖ•„Çå
            if len(args.start_date) == 10:  # YYYY-MM-DD
                start_date = datetime.strptime(args.start_date, "%Y-%m-%d")
            else:  # YYYY-MM-DD HH:MM:SS
                start_date = datetime.strptime(args.start_date, "%Y-%m-%d %H:%M:%S")
        except ValueError:
            print(f"‚ùå ÁÑ°Âäπ„Å™ÈñãÂßãÊó•ÊôÇÂΩ¢Âºè: {args.start_date}")
            return 1
    
    if args.end_date:
        try:
            if len(args.end_date) == 10:  # YYYY-MM-DD
                end_date = datetime.strptime(args.end_date + " 23:59:59", "%Y-%m-%d %H:%M:%S")
            else:  # YYYY-MM-DD HH:MM:SS
                end_date = datetime.strptime(args.end_date, "%Y-%m-%d %H:%M:%S")
        except ValueError:
            print(f"‚ùå ÁÑ°Âäπ„Å™ÁµÇ‰∫ÜÊó•ÊôÇÂΩ¢Âºè: {args.end_date}")
            return 1
    
    # ÂêÑÂàÜÊûêÂÆüË°å
    if args.report:
        print("\n" + "="*60)
        print("üìä È£ü‰∫ãÂàÜÊûêAPI „É≠„Ç∞„É¨„Éù„Éº„Éà")
        print("="*60)
        
        report = analyzer.generate_report(start_date, end_date)
        print(report)
    
    if args.export:
        print("\nüìÅ CSV„Ç®„ÇØ„Çπ„Éù„Éº„Éà‰∏≠: {args.export}")
        try:
            analyzer.export_to_csv(args.export, start_date, end_date)
            print(f"‚úÖ „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆå‰∫Ü: {args.export}")
        except Exception as e:
            print(f"‚ùå „Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº: {e}")
    
    if args.slow:
        print("\nüêå ÈÅÖ„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥ÂàÜÊûê (ÈñæÂÄ§: {args.threshold}ms)")
        slow_sessions = analyzer.find_slow_sessions(args.threshold)
        
        if not slow_sessions:
            print("‚úÖ ÈÅÖ„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
        else:
            print(f"‚ö†Ô∏è  {len(slow_sessions)}ÂÄã„ÅÆÈÅÖ„ÅÑ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü:")
            
            for i, session in enumerate(slow_sessions[:10], 1):
                duration = session.get('total_duration_ms', 0)
                session_id = session.get('session_id', 'unknown')
                start_time = session.get('start_time', 'unknown')
                
                print(f"  {i}. „Çª„ÉÉ„Ç∑„Éß„É≥ {session_id[:8]}... - {duration:.1f}ms ({start_time})")
                
                # ÂêÑ„Éï„Çß„Éº„Ç∫„ÅÆÊôÇÈñìÂÜÖË®≥„ÇíË°®Á§∫
                phase1 = session.get('phase1_duration_ms', 0)
                usda = session.get('usda_search_duration_ms', 0)
                phase2 = session.get('phase2_duration_ms', 0)
                nutrition = session.get('nutrition_calc_duration_ms', 0)
                
                print(f"     ‚îî Phase1: {phase1:.1f}ms, USDA: {usda:.1f}ms, Phase2: {phase2:.1f}ms, Ê†ÑÈ§äË®àÁÆó: {nutrition:.1f}ms")
    
    if args.errors:
        print("\nüö® „Ç®„É©„Éº„Éë„Çø„Éº„É≥ÂàÜÊûê")
        error_patterns = analyzer.find_error_patterns()
        
        if not error_patterns:
            print("‚úÖ „Ç®„É©„Éº„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
        else:
            print(f"‚ö†Ô∏è  {len(error_patterns)}Á®ÆÈ°û„ÅÆ„Ç®„É©„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü:")
            
            for error, session_ids in sorted(error_patterns.items(), key=lambda x: len(x[1]), reverse=True):
                count = len(session_ids)
                print(f"\n  üìå {error} ({count}Âõû)")
                
                # ÊúÄÂàù„ÅÆ5„Å§„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥ID„ÇíË°®Á§∫
                for session_id in session_ids[:5]:
                    print(f"     - „Çª„ÉÉ„Ç∑„Éß„É≥: {session_id}")
                
                if len(session_ids) > 5:
                    print(f"     ... „Åä„Çà„Å≥‰ªñ{len(session_ids) - 5}‰ª∂")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 